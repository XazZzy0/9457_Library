"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7367],{8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var i=r(6540);const s={},t=i.createContext(s);function o(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(t.Provider,{value:n},e.children)}},8553:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"programming/cppbasics","title":"C++ Basics","description":"All the basics related to C++","source":"@site/docs/programming/cppbasics.md","sourceDirName":"programming","slug":"/programming/cppbasics","permalink":"/9457_Library/docs/programming/cppbasics","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"C++ Basics","sidebar_position":2},"sidebar":"programmingSidebar","previous":{"title":"Visual Studio Code","permalink":"/9457_Library/docs/programming/vsc"},"next":{"title":"Libraries (Vex and Custom ones)","permalink":"/9457_Library/docs/programming/vexLib"}}');var s=r(4848),t=r(8453);const o={title:"C++ Basics",sidebar_position:2},a="C++ Basics",l={},c=[{value:"Comments",id:"comments",level:2},{value:"Variables",id:"variables",level:2},{value:"Variables Types",id:"variables-types",level:3},{value:"Declaring (Creating) Variables",id:"declaring-creating-variables",level:3},{value:"Multiple Variables",id:"multiple-variables",level:3},{value:"Macros",id:"macros",level:3},{value:"Arrays",id:"arrays",level:3},{value:"Structures",id:"structures",level:3},{value:"Enums",id:"enums",level:3},{value:"References",id:"references",level:3},{value:"Pointers",id:"pointers",level:3},{value:"Variable Modifications",id:"variable-modifications",level:3},{value:"Printing",id:"printing",level:2},{value:"Conditionals and Operators",id:"conditionals-and-operators",level:2},{value:"Operators",id:"operators",level:3},{value:"If, else if, and else",id:"if-else-if-and-else",level:3},{value:"While loops",id:"while-loops",level:3},{value:"For loops",id:"for-loops",level:3},{value:"Switch Statements",id:"switch-statements",level:3},{value:"Functions",id:"functions",level:2},{value:"Function Types",id:"function-types",level:3},{value:"Function Scope (Global vs Local)",id:"function-scope-global-vs-local",level:3},{value:"Function Overloading",id:"function-overloading",level:3},{value:"Classes",id:"classes",level:2},{value:"Object Oriented Programming (OOP)",id:"object-oriented-programming-oop",level:3},{value:"Constructors",id:"constructors",level:3},{value:"Methods",id:"methods",level:3},{value:"Access Specifiers",id:"access-specifiers",level:2},{value:"References for Advanced C++",id:"references-for-advanced-c",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"All the basics related to C++"}),"\n",(0,s.jsx)(n.p,{children:"In VEX, there are two languages to program in: C++ and Python. For most robotics applications and data algorithms you want to go with the quicker and more efficient languages to process code - in almost all cases for VEX, that will C++."}),"\n",(0,s.jsx)(n.p,{children:"So by default this will be the default language for programming at East."}),"\n",(0,s.jsxs)(n.p,{children:["All resources will be derived from this Site: ",(0,s.jsx)(n.a,{href:"https://www.w3schools.com/cpp/default.asp",children:"https://www.w3schools.com/cpp/default.asp"}),". Refer to this website when more explicit questions arise."]}),"\n",(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"c-basics",children:"C++ Basics"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"comments",children:"Comments"}),"\n",(0,s.jsx)(n.p,{children:"Throughout this entire tutorial comments located around the code will be very prevalent. They are a way to keep your code organized without directly interacting with the code. Say that a couple months have gone by and you forget what a variable does, a comment is there to help you remember! Or, say a function is acting stupid, rather than deleting all of if it and losing it, you can just comment it out."}),"\n",(0,s.jsxs)(n.p,{children:["There are a few ways to do them, but the two most common ways are starting your code with ",(0,s.jsx)(n.code,{children:"//"})," and moving to the next line,  or a multi-line with an opening ",(0,s.jsx)(n.code,{children:"/*"})," & closing ",(0,s.jsx)(n.code,{children:"*/"})," operator."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"// This is a comment, it will not be read by the program\r\n\r\n/*\r\nThis is a multi-line comment\r\nIt can go across multiple lines!\r\nJust like this\r\n*/\n"})}),"\n",(0,s.jsx)(n.h2,{id:"variables",children:"Variables"}),"\n",(0,s.jsx)(n.h3,{id:"variables-types",children:"Variables Types"}),"\n",(0,s.jsx)(n.p,{children:"In C++, there are different types of variables (defined with different keywords), for example:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"int"})," - stores integers (whole numbers), without decimals, such as 123 or -123"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"float"})," - stores integers (whole numbers), without decimals, such as 123 or -123"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"double"})," - also stores floating point numbers, with decimals, such as 19.99 or -19.99 (With double the amount of precision)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"char"})," - stores single characters, such as 'a' or 'B'. Char values are surrounded by single quotes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"string"}),' - stores text, such as "Hello World". String values are surrounded by double quotes']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"bool"})," - stores values with two states: true or false"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"declaring-creating-variables",children:"Declaring (Creating) Variables"}),"\n",(0,s.jsx)(n.p,{children:"To create a variable, specify the type and assign it a value:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"type variableName = value;"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example(s)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"int myNum = 5;                          // Integer (whole number without decimals)\r\nfloat my FloatNum = 5.99;               // Floating point number (with decimals)\r\ndouble myDoubleNum = 5.9999999999;      // Double Floating point number (with more decimals)\r\nchar myLetter = 'D';                    // Character\r\nstring myText = \"Hello\";                // String (text)\r\nbool myBoolean = true;                  // Boolean \n"})}),"\n",(0,s.jsx)(n.admonition,{title:"Heads up!",type:"warning",children:(0,s.jsx)(n.p,{children:'In most instances after each line of code, c++ requires the terminator ";". If this is forgotten often you will get compiler issues.'})}),"\n",(0,s.jsx)(n.h3,{id:"multiple-variables",children:"Multiple Variables"}),"\n",(0,s.jsx)(n.p,{children:'Depending on how you prefer to organize your code, sometimes it can be easier to initialize multiple variables all at once. This can be done with "," as the seperator for the variables'}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example(s)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"int x, y, z;\r\nx = y = z = 50;\r\n\r\n// x, y, and z will now output 50\n"})}),"\n",(0,s.jsx)(n.p,{children:"The other Method in which this can be done is by line by line"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"int tempVar1 = 1;\r\nint tempVar2 = 2;\n"})}),"\n",(0,s.jsx)(n.h3,{id:"macros",children:"Macros"}),"\n",(0,s.jsxs)(n.p,{children:['Sometimes you will want to define an explicit value to a "Keyword" rather than a variable itself. It can help to keep your code more organized. This is done through the ',(0,s.jsx)(n.code,{children:"#define"})," initalization. The most common one that I use is for ",(0,s.jsx)(n.code,{children:"PI"}),". Macros can be finicky, so use them with caution."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example(s)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"#define PI 3.14159\r\n#define RAD2DEG 180/PI\r\n#define DEG2RAD PI/180\r\n\r\nint tempVar = PI*5; // tempVar = 15.70796\n"})}),"\n",(0,s.jsx)(n.admonition,{title:"Heads up!",type:"warning",children:(0,s.jsx)(n.p,{children:"Macro's usually will need to be located at the top of your file in order to run properly."})}),"\n",(0,s.jsx)(n.h3,{id:"arrays",children:"Arrays"}),"\n",(0,s.jsxs)(n.p,{children:["without size ",(0,s.jsx)(n.code,{children:"[]"}),", with size ",(0,s.jsx)(n.code,{children:"[size]"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"int intArray[] = {0, 1, 2};\r\nfloat floatArray[] = {0.0, 1.0, 2.0};\r\ndouble doubleArray[] = {0.00, 1.00, 2.00};\r\n\r\nint intArray[2] = {0, 1};\r\nfloat floatArray[3] = {0.0, 1.0, 2.0};\r\ndouble doubleArray[4] = {0.00, 1.00, 2.00, 4.00};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["can also make them 2d with back-to-back square brackets ",(0,s.jsx)(n.code,{children:"[][]"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"int intArray[2][3] = {{0, 1, 2},\r\n                      {0, 1, 2}};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"structures",children:"Structures"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"code goes here\n"})}),"\n",(0,s.jsx)(n.h3,{id:"enums",children:"Enums"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"code goes here\n"})}),"\n",(0,s.jsx)(n.h3,{id:"references",children:"References"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"code goes here\n"})}),"\n",(0,s.jsx)(n.h3,{id:"pointers",children:"Pointers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"code goes here\n"})}),"\n",(0,s.jsx)(n.h3,{id:"variable-modifications",children:"Variable Modifications"}),"\n",(0,s.jsx)(n.p,{children:"These go before the Variable initalization, they modify the behavior of the variable."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Constants"})}),"\n",(0,s.jsx)(n.p,{children:"An identifier that causes a variable to never change once initally set."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"const float tempVar = 1;\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Static"})}),"\n",(0,s.jsxs)(n.p,{children:["An identifier that causes a variable to remain as a callable after created in a function (see ",(0,s.jsx)(n.strong,{children:"Functions"})," section for more info)."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"static float tempVar = 1;\n"})}),"\n",(0,s.jsx)(n.h2,{id:"printing",children:"Printing"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:["Printing is a way to view your variables results in the terminal. The easiest way to do this is the ",(0,s.jsx)(n.code,{children:"printf"})," or ",(0,s.jsx)(n.code,{children:"cout"})," function, but there are alos a few others depending on what you have available in your library."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'printf("print this out")    // output: print this out\r\ncout << 1;                  // output: 1\n'})}),"\n",(0,s.jsxs)(n.admonition,{title:"printf",type:"warning",children:[(0,s.jsx)(n.p,{children:"In order to use printf with decimals/integers, the sytax must include a string with an inserted key-character as seen below:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'int tempInt = 1;\r\nfloat tempFloat = 1;\r\n\r\nprintf("Var: %i", tempInt);       // output = Var: 1\r\nprintf("Var: %f", tempFloat);     // output = Var: 1.000000\r\nprintf("Var: %.3f", tempFloat);   // output = Var: 1.000        ~ \'.3\' Reduces to 3 decimal places\r\nprintf("Var: %.2f", tempFloat);   // output = Var: 1.00 \n'})})]}),"\n",(0,s.jsx)(n.h2,{id:"conditionals-and-operators",children:"Conditionals and Operators"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"operators",children:"Operators"}),"\n",(0,s.jsx)(n.p,{children:"Operators are ways to check/modify variables against eachother, here are all the types of operators:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Assignment"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["( ",(0,s.jsx)(n.code,{children:"="})," )"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Arithmatic"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["( ",(0,s.jsx)(n.code,{children:"+"})," ) ~ Addition"]}),"\n",(0,s.jsxs)(n.li,{children:["( ",(0,s.jsx)(n.code,{children:"-"})," ) ~ Subtraction"]}),"\n",(0,s.jsxs)(n.li,{children:["( ",(0,s.jsx)(n.code,{children:"*"})," ) ~ Multiplication"]}),"\n",(0,s.jsxs)(n.li,{children:["( ",(0,s.jsx)(n.code,{children:"/"})," ) ~ Division"]}),"\n",(0,s.jsxs)(n.li,{children:["( ",(0,s.jsx)(n.code,{children:"%"})," ) ~ Modulus - Outputs the remainder after division"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Relational/Comparison"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["( ",(0,s.jsx)(n.code,{children:"=="})," ) ~ Equal to"]}),"\n",(0,s.jsxs)(n.li,{children:["( ",(0,s.jsx)(n.code,{children:"!="})," ) ~ Not equal to"]}),"\n",(0,s.jsxs)(n.li,{children:["( ",(0,s.jsx)(n.code,{children:"<"})," )  ~ Less than"]}),"\n",(0,s.jsxs)(n.li,{children:["( ",(0,s.jsx)(n.code,{children:">"})," )  ~ Greater than"]}),"\n",(0,s.jsxs)(n.li,{children:["( ",(0,s.jsx)(n.code,{children:"<="})," ) ~ Less than or equal to"]}),"\n",(0,s.jsxs)(n.li,{children:["( ",(0,s.jsx)(n.code,{children:">="})," ) ~ Greater than or equal to"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Logical"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["( ",(0,s.jsx)(n.code,{children:"!"})," )  ~ NOT"]}),"\n",(0,s.jsxs)(n.li,{children:["( ",(0,s.jsx)(n.code,{children:"&&"})," ) ~ AND"]}),"\n",(0,s.jsxs)(n.li,{children:["( ",(0,s.jsx)(n.code,{children:"||"})," ) ~ OR"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Comma"}),"\r\nThe comma operator (,) is used to separate two or more expressions that are included where only one expression is expected. When the set of expressions has to be evaluated for a value, only the right-most expression is considered."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'a = (b=3, b+2); // set b = 3 first, then a = b+2\r\n\r\nprintf("%i", b) // output: 3\r\nprintf("%i", a) // output: 5\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Operator Example Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:"int tempVar = 1;\r\nint otherVar = 2;\r\nint bigVar = 5;\r\n\r\nbool holdVar = true;\r\nbool otherholdVar = false;\r\n\r\nbigVar % otherVar;  // output: 1\r\n\r\ntempVar > otherVar;  // output: false (0)\r\ntempVar >= otherVar; // output: false (0)\r\ntempVar < otherVar;  // output: true (1)\r\ntempVar <= otherVar; // output: true (0)\r\n\r\n!otherholdVar;       // output: true\r\nholdVar && holdVar;  // output: false\r\nholdVar || holdVar;  // output: true\n"})}),"\n",(0,s.jsx)(n.h3,{id:"if-else-if-and-else",children:"If, else if, and else"}),"\n",(0,s.jsx)(n.h3,{id:"while-loops",children:"While loops"}),"\n",(0,s.jsx)(n.h3,{id:"for-loops",children:"For loops"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Break/Continue:"})}),"\n",(0,s.jsx)(n.h3,{id:"switch-statements",children:"Switch Statements"}),"\n",(0,s.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,s.jsx)(n.h3,{id:"function-types",children:"Function Types"}),"\n",(0,s.jsx)(n.h3,{id:"function-scope-global-vs-local",children:"Function Scope (Global vs Local)"}),"\n",(0,s.jsx)(n.p,{children:"A variable created inside a function belongs to the local scope of that function, and can only be used inside that function:"}),"\n",(0,s.jsx)(n.p,{children:"A local variable cannot be used outside the function it belongs to."}),"\n",(0,s.jsx)(n.p,{children:"If you try to access it outside the function, an error occurs:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'void testcode( int varIN ){\r\n    int newVar = varIN;\r\n\r\n    printf("Output: %i", newVar); // Output: <Number>\r\n}\r\n\r\nint main(){\r\n    printf("Output: %i", newVar); // Won\'t Compile! Doesn\'t exist inside of main; ERROR!\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"If you would like to access a variable everywhere, you must create something called a global variable. This is how you would create such a variable:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'int globalVar; // The global variable, OUTSIDE of the function/main\r\n\r\nvoid testcode( int varIN ){\r\n    globalVar = varIN;\r\n\r\n    printf("Output: %i", newVar); // Output: <Number>\r\n}\r\n\r\nint main(){\r\n    printf("Output: %i", newVar); // Output: <Number>\r\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"function-overloading",children:"Function Overloading"}),"\n",(0,s.jsx)(n.p,{children:"if you like the use of a function and would like to use it by calling it multiple different ways, function overloading exists!"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c",children:'void testcode( void ){\r\n    printf("This function is empty!");\r\n}\r\n\r\nvoid testcode( bool tempIn ){\r\n    printf("This function is for bools!");\r\n}\r\n\r\nvoid testcode( int tempIn ){\r\n    printf("This function is for integers!");\r\n}\r\n\r\nint main(){\r\n    testcode();     // Output: This function is empty!\r\n    testcode(true); // Output: This function is for bools!\r\n    testcode(1);    // Output: This function is for integers!\r\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"classes",children:"Classes"}),"\n",(0,s.jsx)(n.h3,{id:"object-oriented-programming-oop",children:"Object Oriented Programming (OOP)"}),"\n",(0,s.jsx)(n.h3,{id:"constructors",children:"Constructors"}),"\n",(0,s.jsx)(n.h3,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(n.h2,{id:"access-specifiers",children:"Access Specifiers"}),"\n",(0,s.jsx)(n.h3,{id:"references-for-advanced-c",children:"References for Advanced C++"}),"\n",(0,s.jsx)(n.p,{children:"While this covers the general concepts for getting introduced into c++, and kick-started into vex programming there are plenty more advanced concepts which are not covered in this Library. For more information on advanced C++ concepts visit:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://www.w3schools.com/cpp/cpp_oop.asp",children:"https://www.w3schools.com/cpp/cpp_oop.asp"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://en.cppreference.com/w/cpp",children:"https://en.cppreference.com/w/cpp"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);