"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7538],{1887:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"programming/drivecode","title":"Drive Code","description":"Tank Drive","source":"@site/docs/programming/drivecode.md","sourceDirName":"programming","slug":"/programming/drivecode","permalink":"/9457_Library/docs/programming/drivecode","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Drive Code","sidebar_position":4},"sidebar":"programmingSidebar","previous":{"title":"Libraries (Vex and Custom ones)","permalink":"/9457_Library/docs/programming/vexLib"},"next":{"title":"Auton Code","permalink":"/9457_Library/docs/programming/autoncode"}}');var o=n(4848),i=n(8453);const s={title:"Drive Code",sidebar_position:4},a="Driver Controls",l={},c=[{value:"Tank Drive",id:"tank-drive",level:2},{value:"Arcade Drive (Dual Stick)",id:"arcade-drive-dual-stick",level:2},{value:"Accel-based Arcade Drive",id:"accel-based-arcade-drive",level:2},{value:"Controller Behavior",id:"controller-behavior",level:2},{value:"Pressing Buttons",id:"pressing-buttons",level:3},{value:"Toggle Buttons",id:"toggle-buttons",level:3},{value:"Counter Buttons",id:"counter-buttons",level:3}];function d(e){const r={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"driver-controls",children:"Driver Controls"})}),"\n",(0,o.jsx)(r.h2,{id:"tank-drive",children:"Tank Drive"}),"\n",(0,o.jsx)(r.hr,{}),"\n",(0,o.jsx)(r.h2,{id:"arcade-drive-dual-stick",children:"Arcade Drive (Dual Stick)"}),"\n",(0,o.jsx)(r.hr,{}),"\n",(0,o.jsx)(r.h2,{id:"accel-based-arcade-drive",children:"Accel-based Arcade Drive"}),"\n",(0,o.jsx)(r.hr,{}),"\n",(0,o.jsx)(r.h2,{id:"controller-behavior",children:"Controller Behavior"}),"\n",(0,o.jsx)(r.hr,{}),"\n",(0,o.jsx)(r.h3,{id:"pressing-buttons",children:"Pressing Buttons"}),"\n",(0,o.jsx)(r.p,{children:"This is how you would hold a button and it will update behavior"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-c",children:"// Create the Objects\r\ncompetition Competition;\r\ncontroller Controller;\r\nmotor Motor = motor(PORT1);\r\n\r\n// Create a counter\r\nvoid userControl(void) {\r\n    while(true){\r\n        if (Controller.ButtonA.pressing()){\r\n            motor.spin(fwd); // Spin the motor forwards\r\n        }\r\n        else if (Controller.ButtonB.pressing()) {\r\n            motor.spin(reverse); // Spin the motor forwards\r\n        }\r\n        else {\r\n            motor.stop();\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,o.jsx)(r.h3,{id:"toggle-buttons",children:"Toggle Buttons"}),"\n",(0,o.jsx)(r.p,{children:"This is how you would press a button a single time and it will update behavior to true/false. In this example we are imitating a system such as a pnumatic piston turning on/off."}),"\n",(0,o.jsx)(r.admonition,{title:"Remember",type:"tip",children:(0,o.jsxs)(r.p,{children:["There are two 'pressed' functions for programming on the controller, ",(0,o.jsx)(r.code,{children:"Controller.ButtonA.PRESSED"})," (true/false output) and ",(0,o.jsx)(r.code,{children:"Controller.ButtonA.pressed(callback)"}),". In most instances you will want to use the 'PRESSED' function."]})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-c",children:"// Create the Objects\r\ncompetition Competition;\r\ncontroller Controller;\r\ndigital_out digout = digital_out(Brain.ThreeWirePort.A);\r\n\r\n// Create a counter\r\nbool setVar = false;\r\n\r\nvoid userControl(void) {\r\n    while(true){\r\n        if (Controller.ButtonA.PRESSED){\r\n            if      (setVar == true) { setVar = false; } // check if setVar is true, set to false.\r\n            else if (setVar == false) { setVar = true; }  // check if setVar is false, set to true.\r\n\r\n            digout.set(setVar); \r\n        }\r\n    }\r\n}\n"})}),"\n",(0,o.jsx)(r.h3,{id:"counter-buttons",children:"Counter Buttons"}),"\n",(0,o.jsx)(r.p,{children:"This is how you would press a button and it would count up; Use with arrays and PID's are super helpful. In this example, we are spinning a motor to a certain degree callout."}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-c",children:"// Create the Objects\r\ncompetition Competition;\r\ncontroller Controller;\r\nmotor Motor = motor(PORT1);\r\n\r\n// Create a counter\r\nint countVar = 0;\r\nint matVars[3] = {0, 45, 90};\r\n\r\nvoid userControl(void) {\r\n    while(true){\r\n        if (Controller.ButtonA.PRESSED){\r\n            countVar++; // Add 1 to count var\r\n\r\n            if (countVar > 2) { countVar = 0; } // checks if countVar is greater than a certain number, resets to original value\r\n\r\n            motor.spintoPosition(matVars[countVars], false) // spins motor to 0, 45, or 90 degrees\r\n        }\r\n    }\r\n}\n"})})]})}function u(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>a});var t=n(6540);const o={},i=t.createContext(o);function s(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);